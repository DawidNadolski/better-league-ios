schema {
  query: RootQuery
  mutation: RootMutation
}

"""
A directive used by the Apollo iOS client to annotate operations or fragments that should be used exclusively for generating local cache mutations instead of as standard operations.
"""
directive @apollo_client_ios_localCacheMutation on QUERY | MUTATION | SUBSCRIPTION | FRAGMENT_DEFINITION

"""
A directive used by the Apollo iOS code generation engine to generate custom import statements in operation or fragment definition files. An import statement to import a module with the name provided in the `module` argument will be added to the generated definition file.
"""
directive @import(
  """The name of the module to import."""
  module: String!
) repeatable on QUERY | MUTATION | SUBSCRIPTION | FRAGMENT_DEFINITION

type RootMutation {
  createUser(input: UserSignupInput!): User!
  createMatch(input: MatchInput!): Match!
  placeBet(input: BetInput!): Bet!
  updateUserTeam(teamId: ID!): User!
  endMatch(matchId: ID!): Match!
  updateUserPassword(input: UserLoginInput!): User!
}

type RootQuery {
  logIn(input: UserLoginInput!): AuthorizationData!
  getUser(userId: ID!): UserData!
  users: [UserData!]!
  userBets(userId: ID!): [Bet!]!
  matches: [Match]!
  teams: [Team!]!
}

scalar Date

type User {
  id: ID!
  name: String!
  password: String
  points: Int!
  bets: [Bet]
  winningTeam: Team
}

type UserData {
  id: ID!
  name: String!
  bets: [Bet]
  winningTeam: Team
}

type Bet {
  id: ID!
  homeTeamGoals: Int!
  awayTeamGoals: Int!
  match: Match!
  isResolved: Boolean!
  points: Int!
  better: User!
}

type Match {
  id: ID!
  homeTeam: Team!
  homeTeamGoals: Int!
  awayTeam: Team!
  awayTeamGoals: Int!
  startDate: Date!
  hasEnded: Boolean!
  stage: String!
}

type Team {
  id: ID!
  name: String!
  group: String!
  isPlaying: Boolean!
  didWin: Boolean!
}

type AuthorizationData {
  token: String!
  userId: String!
}

input BetInput {
  matchId: ID!
  homeTeamGoals: Int!
  awayTeamGoals: Int!
}

input MatchInput {
  homeTeamName: String!
  awayTeamName: String!
  stage: String!
  date: Date!
}

input UserSignupInput {
  name: String!
  password: String!
  confirmedPassword: String!
}

input UserLoginInput {
  name: String!
  password: String!
}